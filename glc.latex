<entryPoint> ::= <programEntries>

<programEntries> ::= <programEntries> <variableInit>
                  |  <variableInit>
                  |  <programEntries> <functionDefinition>
                  |  <functionDefinition>

<functionDefinition> ::= <typeSpecifier> IDENTIFIER '(' <parameters> ')' <compoundStatement>
                      |  <typeSpecifier> MAIN_FUNC '(' <parameters> ')' <compoundStatement>

<parameters> ::= <parameter>
              | ɛ

<parameter> ::= <parameters> ',' <typeSpecifier> IDENTIFIER
              | <typeSpecifier> IDENTIFIER

<compoundStatement> ::= '{' <declaration> <statements> '}'

<declaration> ::= <declaration> <variableInit>
                | ɛ

<statements> ::= <statements> <statement>
              | ɛ

<statement> ::= <expression>
              | <inOutStatement>
              | <fluxControlstatement>
              | <iterationStatement>
              | <localStatetements>

<inOutStatement> ::= WRITE '(' STR ')' ';'
                  | WRITE '(' <variable> ')' ';'
                  | WRITELN '(' STR ')' ';'
                  | WRITELN '(' <variable> ')' ';'
                  | READ '(' <variable> ')' ';'

<fluxControlstatement> ::= RETURN <comparationalExpression>
                        | RETURN ';'
                        | IF '(' <comparationalExpression> ')' <expression>
                        | IF '(' <comparationalExpression> ')' RETURN <expression>
                        | IF '(' <comparationalExpression> ')' <localStatetements>
                        | IF '(' <comparationalExpression> ')' <localStatetements> ELSE <localStatetements>

<iterationStatement> ::= FOR '(' <comparationalExpression> ')' <localStatetements>
                      | FOR '(' <expression> <expression> <forIncrement> ')' <localStatetements>
                      | SET_FORALL '(' <term> ADD_IN_OP <comparationalExpression> ')' <localStatetements>

<expression> ::= <comparationalExpression> ';'
              | <variableAssignment>

<comparationalExpression> ::= <comparationalExpression> AND <logicalExpression>
                        | <comparationalExpression> OR <logicalExpression>
                        | NEG <logicalExpression>
                        | <logicalExpression>

<logicalExpression> ::= <logicalExpression> ILT <arithmeticExpression>
                    | <logicalExpression> ILTE <arithmeticExpression>
                    | <logicalExpression> IGT <arithmeticExpression>
                    | <logicalExpression> IGTE <arithmeticExpression>
                    | <logicalExpression> IDIFF <arithmeticExpression>
                    | <logicalExpression> IEQ <arithmeticExpression>
                    | <arithmeticExpression>

<arithmeticExpression> ::= <arithmeticExpression> ADD_OP <arithmeticExpression2>
                        | <arithmeticExpression> SUB_OP <arithmeticExpression2>
                        | <arithmeticExpression2>

<arithmeticExpression2> ::= <arithmeticExpression2> MULT_OP <unaryOperation>
                    | <arithmeticExpression2> DIV_OP <unaryOperation>
                    | <unaryOperation>

<unaryOperation> ::= SUB_OP <term>
                    | <term>

<setOperationalExpression> ::= ADD_SET_OP '(' <setBody>')'
                            | REMOVE_SET_OP '(' <setBody> ')'
                            | EXISTS_IN_SET_OP '(' <setBody>')'
                            | IS_SET '(' <term> ')'

<setBody> ::= <comparationalExpression> ADD_IN_OP <setOperationalExpression>
           | <comparationalExpression> ADD_IN_OP <variable>

<variableAssignment> ::= IDENTIFIER ASSIGN <expression>

<localStatetements> ::= '{' <declaration> <statements> '}'

<forIncrement> ::= IDENTIFIER ASSIGN <arithmeticExpression>

<term> ::= '(' <comparationalExpression> ')'
        | <variable>
        | <setOperationalExpression>
        | <functionCall>
        | EMPTY
        | FLOAT
        | INT

<functionCall> ::= IDENTIFIER '(' <functionArguments> ')'

<functionArguments> ::= <callArguments>
                      | ɛ

<callArguments> ::= <callArguments> ',' <setOperationalExpression>
                  | <setOperationalExpression>

<variableInit> ::= <typeSpecifier> IDENTIFIER ';'

<variable> ::= IDENTIFIER

<typeSpecifier> ::= T_INT
                | T_FLOAT
                | T_ELEM
                | T_SET

IDENTIFIER ::= LETTER(LETTER|DIGIT|UNDERSCORE)*

DIGIT ::= [0-9]
LETTER ::= [a-zA-z]

EMPTY ::= 'EMPTY'
INT ::= {DIGIT}+
FLOAT ::= {DIGIT}+[.]{DIGIT}+
STR ::= \"[^\"]*\"|\'([^'\\\n]|\\.)'

ASSIGN ::= '='
ADD_OP ::= '+'
SUB_OP ::= '-'
MULT_OP ::= '*'
DIV_OP ::= '/'
ADD_SET_OP ::= 'add'
ADD_IN_OP ::= 'in'
REMOVE_SET_OP ::= 'remove'
EXISTS_IN_SET_OP ::= 'exists'

ILT ::= '<'
ILTE ::= '<='
IGT ::= '>'
IGTE ::= '>='
IDIFF ::= '!='
IEQ ::= '=='
IS_SET ::= 'is_set'
AND ::= '&&'
OR ::= '||'
NEG ::= '!'

IF ::= 'if'
ELSE ::= 'else'
FOR ::= 'for'
SET_FORALL ::= 'forall'
RETURN ::= 'return'

READ ::= 'read'
WRITE ::= 'write'
WRITELN ::= 'writeln'

MAIN_FUNC ::= 'main'

T_INT ::= 'int'
T_INT ::= 'float'
T_INT ::= 'elem'
T_INT ::= 'set'