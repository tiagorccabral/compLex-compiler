<translation-unit> ::= {<external-declaration>}*

<external-declaration> ::= <function-definition>
                         | <declaration>

<function-definition> ::= <declarator> {<declaration>}* <compound-statement>

<declaration-specifier> ::= <type-specifier>

<type-specifier> ::= int
                   | float
                   | elem
                   | set

<specifier-qualifier> ::= <type-specifier>

<digit> ::= [0-9]

<integer-type> ::= <digit>+

<string-type> ::= '"'.*'"' | '.*'

<float-type> ::= <digit>+'.'<digit>+

<declarator> ::= {<pointer>}? <direct-declarator>

<pointer> ::= * {<pointer>}?

<read-specifier> ::= read ( <integer-type> )
                    | read ( <float-type> ) 

<write-specifier> ::=  write ( <integer-type> )
                    | write ( <float-type> )
                    | write ( <string-type> )

<writeln-specifier> ::=  writeln ( <integer-type> )
                      | writeln ( <float-type> )
                      | writeln ( <string-type> )

<in-out-declaration> ::= <read-specifier>
                        | <write-specifier>
                        | <writeln-specifier>

<direct-declarator> ::= <identifier>
                      | ( <declarator> )
                      | <direct-declarator> [ {<constant-expression>}? ]
                      | <direct-declarator> ( <parameter-type-list> )
                      | <direct-declarator> ( {<identifier>}* )

<constant-expression> ::= <conditional-expression>

<conditional-expression> ::= <logical-or-expression>

<logical-or-expression> ::= <logical-and-expression>
                          | <logical-or-expression> || <logical-and-expression>

<logical-and-expression> ::= <inclusive-or-expression>
                           | <logical-and-expression> && <inclusive-or-expression>

<and-expression> ::= <equality-expression>
                   | <and-expression> & <equality-expression>

<equality-expression> ::= <relational-expression>
                        | <equality-expression> == <relational-expression>
                        | <equality-expression> != <relational-expression>

<relational-expression> ::= <shift-expression>
                          | <relational-expression> < <shift-expression>
                          | <relational-expression> > <shift-expression>
                          | <relational-expression> <= <shift-expression>
                          | <relational-expression> >= <shift-expression>

<shift-expression> ::= <additive-expression>
                     | <shift-expression> << <additive-expression>
                     | <shift-expression> >> <additive-expression>

<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> + <multiplicative-expression>
                        | <additive-expression> - <multiplicative-expression>

<multiplicative-expression> ::= <cast-expression>
                              | <multiplicative-expression> * <cast-expression>
                              | <multiplicative-expression> / <cast-expression>

<set-primitive-expression> ::= add ( <primary-expression> in <set-primitive-expression> )
                              | remove ( <primary-expression> in <set-primitive-expression> )
                              | exists ( <primary-expression> in <set-primitive-expression> )

<cast-expression> ::= ( <type-name> ) <cast-expression>

<postfix-expression> ::= <primary-expression>
                       | <postfix-expression> [ <expression> ]
                       | <postfix-expression> ( {<assignment-expression>}* )

<primary-expression> ::= <identifier>
                       | <constant>
                       | ( <expression> )

<constant> ::= <integer-constant>
             | <character-constant>
             | <floating-constant>
             | (EMPTY)

<expression> ::= <assignment-expression>
               | <expression> , <assignment-expression>

<assignment-expression> ::= <conditional-expression>
                          | <assignment-operator> <assignment-expression>

<assignment-operator> ::= =

<type-name> ::= {<specifier-qualifier>}+ {<abstract-declarator>}?

<parameter-type-list> ::= <parameter-list>
                        | <parameter-list> , ...

<parameter-list> ::= <parameter-declaration>
                   | <parameter-list> , <parameter-declaration>

<parameter-declaration> ::= {<declaration-specifier>}+ <declarator>
                          | {<declaration-specifier>}+ <abstract-declarator>
                          | {<declaration-specifier>}+

<abstract-declarator> ::= <pointer>
                        | <pointer> <direct-abstract-declarator>
                        | <direct-abstract-declarator>

<direct-abstract-declarator> ::=  ( <abstract-declarator> )
                               | {<direct-abstract-declarator>}? [ {<constant-expression>}? ]
                               | {<direct-abstract-declarator>}? ( {<parameter-type-list>}? )

<declaration> ::=  {<declaration-specifier>}+ {<init-declarator>}* ;

<init-declarator> ::= <declarator>
                    | <declarator> = <initializer>

<initializer> ::= <assignment-expression>
                | { <initializer-list> }
                | { <initializer-list> , }

<initializer-list> ::= <initializer>
                     | <initializer-list> , <initializer>

<statement> ::= <expression-statement>
              | <selection-statement>
              | <iteration-statement>
              | <jump-statement>

<expression-statement> ::= {<expression>}? ;

<belonging-statement> ::= <expression> in <expression>

<selection-statement> ::= if ( <expression> ) <statement>
                        | else <statement>

<iteration-statement> ::= for ( {<expression>}? ; {<expression>}? ; {<expression>}? ) <statement>
                        | forall <belonging-statement>

<jump-statement> ::= return {<expression>}? ;